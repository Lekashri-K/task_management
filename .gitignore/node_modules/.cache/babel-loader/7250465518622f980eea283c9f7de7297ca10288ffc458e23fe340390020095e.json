{"ast":null,"code":"var _jsxFileName = \"D:\\\\task_management\\\\frontend\\\\src\\\\components\\\\PrivateRoute.js\";\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { getCurrentUser } from '../auth'; // Adjust path if needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  allowedRoles\n}) => {\n  const user = getCurrentUser();\n  const access_token = localStorage.getItem('access_token');\n  if (!access_token || !user) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if user's role is allowed\n  if (!allowedRoles.includes(user.role)) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 10\n  }, this); // Renders nested route like Dashboard\n};\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","getCurrentUser","jsxDEV","_jsxDEV","PrivateRoute","allowedRoles","user","access_token","localStorage","getItem","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","includes","role","_c","$RefreshReg$"],"sources":["D:/task_management/frontend/src/components/PrivateRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport { getCurrentUser } from '../auth'; // Adjust path if needed\r\n\r\nconst PrivateRoute = ({ allowedRoles }) => {\r\n  const user = getCurrentUser();\r\n  const access_token = localStorage.getItem('access_token');\r\n\r\n  if (!access_token || !user) {\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n\r\n  // Check if user's role is allowed\r\n  if (!allowedRoles.includes(user.role)) {\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n\r\n  return <Outlet />; // Renders nested route like Dashboard\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAASC,cAAc,QAAQ,SAAS,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EACzC,MAAMC,IAAI,GAAGL,cAAc,CAAC,CAAC;EAC7B,MAAMM,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAEzD,IAAI,CAACF,YAAY,IAAI,CAACD,IAAI,EAAE;IAC1B,oBAAOH,OAAA,CAACJ,QAAQ;MAACW,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;;EAEA;EACA,IAAI,CAACV,YAAY,CAACW,QAAQ,CAACV,IAAI,CAACW,IAAI,CAAC,EAAE;IACrC,oBAAOd,OAAA,CAACJ,QAAQ;MAACW,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;EAEA,oBAAOZ,OAAA,CAACH,MAAM;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,CAAC,CAAC;AACrB,CAAC;AAACG,EAAA,GAdId,YAAY;AAgBlB,eAAeA,YAAY;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}